[
  {"query": "print hello world", "code": "print('hello world')"},
  {"query": "sum numbers 1 to 10", "code": "sum(range(1, 11))"},
  {"query": "reverse string abc", "code": "'abc'[::-1]"},
  {"query": "list of squares 0 to 9", "code": "[i*i for i in range(10)]"},
  {"query": "sort list 3 1 2", "code": "sorted([3, 1, 2])"},
  {"query": "read csv file data.csv using pandas", "code": "import pandas as pd\npd.read_csv('data.csv')"},
  {"query": "filter dataframe rows where price > 100", "code": "df[df['price'] > 100]"},
  {"query": "group by category and compute average price", "code": "df.groupby('category')['price'].mean()"},
  {"query": "calculate correlation matrix of dataframe", "code": "df.corr()"},
  {"query": "plot histogram of column age", "code": "import matplotlib.pyplot as plt\nplt.hist(df['age'])"},
  {"query": "plot scatter of sepal length vs sepal width", "code": "import matplotlib.pyplot as plt\nplt.scatter(df['sepal_length'], df['sepal_width'])"},
  {"query": "plot line chart of monthly sales", "code": "import matplotlib.pyplot as plt\nplt.plot(df['month'], df['sales'])"},
  {"query": "one-hot encode column species", "code": "pd.get_dummies(df['species'])"},
  {"query": "normalize feature x with minmax scaler", "code": "from sklearn.preprocessing import MinMaxScaler\nMinMaxScaler().fit_transform(x)"},
  {"query": "standardize features with standard scaler", "code": "from sklearn.preprocessing import StandardScaler\nStandardScaler().fit_transform(X)"},
  {"query": "impute missing values age with median", "code": "df['age'].fillna(df['age'].median(), inplace=True)"},
  {"query": "apply log transformation to column revenue", "code": "import numpy as np\nnp.log1p(df['revenue'])"},
  {"query": "split dataset into train and test 80/20", "code": "from sklearn.model_selection import train_test_split\ntrain_test_split(X, y, test_size=0.2, random_state=42)"},
  {"query": "train random forest classifier with 100 trees", "code": "from sklearn.ensemble import RandomForestClassifier\nRandomForestClassifier(n_estimators=100).fit(X, y)"},
  {"query": "perform grid search for svm c parameter", "code": "from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nGridSearchCV(SVC(), {'C': [0.1, 1, 10]}).fit(X, y)"},
  {"query": "compute roc auc score of predictions", "code": "from sklearn.metrics import roc_auc_score\nroc_auc_score(y_true, y_score)"},
  {"query": "create pivot table of mean sales by region and product", "code": "df.pivot_table(values='sales', index='region', columns='product', aggfunc='mean')"},
  {"query": "merge two dataframes on id", "code": "pd.merge(df1, df2, on='id')"},
  {"query": "drop duplicates in dataframe", "code": "df.drop_duplicates()"}
]
